@model ILS.UserManagement.ViewModels.UserRoleViewModel
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
<link href="~/Scripts/themes/default/style.min.css" rel="stylesheet" />
<script src="~/Scripts/jstree.min.js"></script>
<link href="~/Content/select2.min.css" rel="stylesheet" />
<script src="~/Scripts/select2.full.min.js"></script>
<style>
    .modal-dialog {
        width: 50% !important;
    }

    .avatar-preview {
        width: 192px;
        height: 192px;
        position: relative;
        border: 6px solid #F8F8F8;
        box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.1);
    }

    a {
        cursor: pointer;
    }
</style>

<script>
    $(document).ready(function () {
        $("#btn1N").click(function () {

            $('li').removeClass('active');
            $('.nav-tabs li:nth-child(2)').addClass('active');
        });
        $("#btn1P").click(function () {
            $('li').removeClass('active');
            $('.nav-tabs li:nth-child(1)').addClass('active');

        });
        $("#btn2N").click(function () {

            $('li').removeClass('active');
            $('.nav-tabs li:nth-child(3)').addClass('active');

        });
        $("#btn2P").click(function () {
            $('li').removeClass('active');
            $('.nav-tabs li:nth-child(2)').addClass('active');

        });
    });
</script>

<div class="modal-header">
    <h4 class="modal-title"><b>Edit User</b></h4>
    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>
@using (Html.BeginForm("EditUser", "Administration", FormMethod.Post, new { @id = "myForm" }))
{
    <div class="modal-body">

           
                <div class="row">
                    <div class="col-md-12">

                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                      
                            <div class="nav-tabs-custom">
                                <ul class="nav nav-tabs">
                                    <li class="nav-item"><a class="nav-link active" href="#User" data-toggle="tab">User Information</a></li>
                                    <li class="nav-item"><a class="nav-link" href="#Roles" data-toggle="tab">Role name</a></li>
                                </ul>


                                <div class="tab-content">
                                 
                                        <div id="User" class="tab-pane active">

                                            <div class="col-md-12">
                                                <br />
                                                <div class="form-group">
                                                    <div class="row">
                                                        <div class="col-md-6">
                                                            <div class="form-group">
                                                                <label>P.No</label>
                                                                @Html.EditorFor(model => model.tbl_User.Pno, new { htmlAttributes = new { onchange = "UserCheck()", @class = "form-control", @placeholder = "P.No", @readonly = "true" } })
                                                                @Html.ValidationMessageFor(model => model.tbl_User.Pno, "", new { @class = "text-danger" })

                                                            </div>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <div class="form-group">
                                                                <label>Unit</label>
                                                                @Html.DropDownListFor(model => model.tbl_User.UnitId, new SelectList(Model._tbl_Unit, "Id", "Name"), "Select", new { @class = "form-control", @required = "true" })
                                                                @Html.ValidationMessageFor(model => model.tbl_User.UnitId, "", new { @class = "text-danger" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>


                                                <div class="form-group">
                                                    <label>User Name</label>
                                                    @Html.EditorFor(model => model.tbl_User.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "User Name", @required = "true" } })
                                                    @Html.ValidationMessageFor(model => model.tbl_User.Name, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="form-group">
                                                    <label>Contact No.</label>
                                                    @Html.EditorFor(model => model.tbl_User.Contact, new { htmlAttributes = new { @class = "form-control", @placeholder = "Contact No." } })
                                                    @Html.ValidationMessageFor(model => model.tbl_User.Contact, "", new { @class = "text-danger" })

                                                </div>
                                            </div>

                                        </div>
                                        <div id="Roles" class="tab-pane">
                                            <div class="col-md-12">
                                                <br />
                                                <div class="form-group">
                                                    <div class="row">
                                                        <div class="col-md-9">
                                                            @* @Html.DropDownListFor(model => model.tbl_Role.RoleId, new SelectList(Model._tbl_Role, "RoleId", "Name"), "Select", new { @class = "form-control col-md-8", @required = "true", @placeholder = "select" })*@
                                                            <select id="ddRoles" class="form-control"></select>
                                                            @Html.ValidationMessageFor(model => model.tbl_Role.RoleId, "", new { @class = "text-danger" })

                                                        </div>

                                                        <div class="col-md-3">
                                                            <input type="button" id="addRole" value="Add Role" class="btn btn-sm btn-success" />

                                                        </div>
                                                    </div> <br />
                                                    <br />
                                                    <div class="form-group">
                                                        <div class="table table-responsive">
                                                            <table id="userRoles" class="display" width="100%"></table>


                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                 
                                </div>
                            </div>

                         </div>
             
                </div>
          

                <div class="modal-footer">
                    <input type="hidden" name="selectedItems" id="selectedItems" />
                    <button type="button" class="btn btn-default " data-dismiss="modal">Cancel</button>

                    <button type="button" onclick="return resetPassword()" id="btnResetPassword" class="btn btn-default red">Reset Password</button>


                    <button type="submit" onclick="getDataItems()" class="btn btn-primary float-right"><i class="fa fa-save"></i> Save</button>

                </div>
        
    </div>
}

<script>
    var roleMaster = [];
    var roleAdded = [];
    var valSelected = "";
    var userRoleTable;
    var userRole;
    var data;
    var defaultRoleId = "";

    $(document).ready(function () {

        // Getting  All roles for RoleMaster Array

        data = @Html.Raw(Json.Encode(Model.RolesModel_list));

        userRole = @Html.Raw(Json.Encode(Model.userRoleModel_list));
        roleMaster = data;
        //// get each role from User role table and push in Role added from Master role after id compare with user role's table
        userRole.forEach(function (o) {
            data.forEach(function (p) {
                if (o.RoleId == p.RoleId) {
                    p.IsDefault = o.IsDefault;
                    roleAdded.push(p);
                }
            });
            roleMaster = roleMaster.filter(obj => obj.RoleId !== o.RoleId);
        });console.log("roleAdded", roleAdded);
        console.log("roleMaster", roleMaster);
         // console.log("roleAdded", roleAdded);


        var simple_checkbox = function (roleAdded, type, full, meta) {
            var IsDefault = roleAdded == true ? "checked" : "";
            return '<input type="checkbox" class="checkbox" ' +
                IsDefault + ' />';
            console.log(simple_checkbox);
        }


        //var simple_checkbox = function (data, type, full, meta) {
        //     var is_checked = data == true ? "checked" : "";
        //     return '<input type="checkbox" **class="checkbox disabled"** ' +
        //         is_checked + ' />';
        // }


        //$(function () {
        //    $(".checkbox").change(function (e) {
        //        e.preventDefault();
        //        if ($(this).is(":checked")) {
        //            $("input").prop("checked", false);
        //            $(this).prop("checked", true);
        //        }
        //    });
        //});

        //initiate User Role Table
        userRoleTable = $('#userRoles').DataTable({

            data: roleAdded,
            columns: [

                { 'data': "RoleId", title: "RoleId" },
                { 'data': "Name", title: "Name" },
                {
                    'data': "IsDefault", title: "IsDefault", "render": simple_checkbox
                },
                {
                    'data': function (data, type, row, meta) {
                        return '<a data-toggle="modal"  data-target="#delRole"  class="btn-danger btn-sm select">' + 'Delete' + '</a>'
                    }
                },
            ],
       'columnDefs': [{
                targets: 2,
                //  data: null,
                defaultContent: '',
                orderable: false,
                className: 'select-checkbox'
            }],
            select: {
                style: 'os',
                selector: 'td:not(:first-child, :nth-child(2))'
            },
            order: [[1, 'asc']],
        });

        loadTable(roleAdded);
        loadRoles();

        //$('.checkbox').on('click', function () {
        //    if ($(this).parent().parent().hasAttr('checked')) {
        //        $(this).parent().parent().removeAttr('checked');
        //    } else {
        //        table.$('.checkbox').removeAttr('checked');
        //        $(this).parent().parent().attr('checked');
        //    }
        //});


        //$('#userRoles tbody').on('click', '.checkbox', function () {
        //    if ($(userRoleTable).rows().td().hasAttr('checked')) {
        //        console.log("ifffff");
        //        $(this).parent().parent().removeAttr('checked');
        //    } else {
        //        console.log("ifffff elseeee");
        //        userRoleTable.$('.checkbox').removeAttr('checked');
        //        $(this).parent().parent().attr('checked');
        //    }
        //});


        var simple_checkbox = function (roleAdded, type, full, meta) {
            var IsDefault = roleAdded == true ? "checked" : "";
            return '<input type="checkbox" class="checkbox" ' +
                IsDefault + ' />';
            console.log(simple_checkbox);
        }

        //$("#userRoles tbody").on('click', '.checkbox', function (data, type, row, meta) {
        //    console.log("newwwwwww");
        //    if (userRoleTable.$(".checkbox").length > 0) {

        //        userRoleTable.rows($(this).closest('tr').find("input[type='checkbox']"));
        //        {
        //            userRoleTable.$('.checkbox').removeAttr('checked');
        //            userRoleTable.$("input[type='checkbox']").attr('checked');
        //        }

        //    }
        //});
        //$("#userRoles tbody tr").each(function (index, elem) {
        //    console.log("newwwwwww");
        //    if (userRoleTable.$(".checkbox").length > 0) {
        //        //  console.log(userRoleTable.$(".checkbox").length);

        //        userRoleTable.$('checkbox').removeAttr('checked');
        //        userRoleTable.rows($(this).closest('tr'));
        //        {
        //            userRoleTable.$('.checkbox').attr("checked");

        //        }


        //    }
        //});

            //var oTable = $('#yourTableId').dataTable();
            //$('#yourTableId tbody tr').each(function (index, elem) {
            //    if ($(this).hasClass("selected")) {
            //        var aData = oTable._('tr')[index];

            //    }
            //});


            //if ($(userRoleTable).parent().parent().hasAttr('checked')) {
            //   $(this).parent().parent().removeAttr('checked');
            //} else {
            //    table.$('.checkbox').removeAttr('checked');
            //    $(this).parent().parent().attr('checked');
            //}



        //1.TO DELETE ROLES FROM TABLE----------------------------------------------------


        $('#userRoles tbody').on("click", '.select', function () {

            var id = $(this).closest('tr').find("td:eq(0)").text();
            console.log(id);

            // First get all current roles loaded in dropdown -----------
            var Roles = document.getElementById("ddRoles");
            // get exact role from table(role added array) which is selected
            var opt = roleAdded.filter(obj => obj.RoleId == id);

            // restoring (append) role back into dd before remove from table
            var el = document.createElement("option");
            el.textContent = opt[0].Name;
            el.value = opt[0].RoleId;
            Roles.appendChild(el);
            // Now removing from table by removing thye selected role from RoleAded array
            roleAdded = roleAdded.filter(obj => obj.RoleId !== id);
            loadTable(roleAdded);
        });
        //TO DELETE ROLES FROM TABLE----------------------------------------------------
        $('#userRoles tbody').on("click", '.select-checkbox', function () {

            var tableData = userRoleTable.rows($(this).closest('tr')).data();
            var role = $(this).closest('tr').find("td:eq(0)").text();
            defaultRoleId = role;
            console.log("roleId", defaultRoleId);
            $("#defaultRoleId").val(defaultRoleId);
            console.log($("#defaultRoleId").val());

        });
    });

    function loadTable(roleAdded) {
        $('#userRoles').DataTable().clear();
        $('#userRoles').DataTable().rows.add(roleAdded);
        $('#userRoles').DataTable().draw();
    }


    function resetPassword() {

        var response = true;
        if (confirm("Are you sure you want to reset password ?")) {

            $.ajax({
                type: "POST",
                url: '@Url.Action("ResetPassword", "Administration")',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ userId: $("#tbl_User_Pno").val() }),
                datatype: "json",
                success: function(data)
                {
                    if (data.type == "success") {

                        alert(data.msg);

                    } else {

                        alert(data.msg);
                    }

                   window.location.href = '@Url.Action("UserIndex", "Administration")'

                },
               failure: function () {
               },
               error: function (data,abc,xyz) {
                    alert("Something went wrong.");
                }
            });

        }

        return response;
    }


    function loadRoles() {
        var Roles = document.getElementById("ddRoles");
        for (var i = 0; i < roleMaster.length; i++) {

            var el = document.createElement("option");

            if (roleMaster.length > 0) {
                el.textContent = roleMaster[i].Name;
                el.value = roleMaster[i].RoleId;

                Roles.appendChild(el);
                console.log("..........", Roles);
            }
        }
    }

    function loadddRoles(data) {
        console.log("role added",data);
    }

    $("#addRole").click(function () {
        valSelected = document.getElementById("ddRoles").value;
        console.log('selected', valSelected);
        $("#ddRoles option[value= " + valSelected + " ]").remove();

        data.forEach(function (o) { if (o.RoleId == valSelected) roleAdded.push(o); });

        console.log("role added.............", roleAdded);
      //  $("#userRoles").DataTable().destroy();


        loadTable(roleAdded);
       // console.log("sel object", roleMaster.find(selectedObject));
    });



    function getDataItems() {
        var tblData = $("#userRoles tbody");
        console.log("..ds.", tblData);
        var selectedData=[];
        tblData.find('tr').each(function (i) {
            var $tds = $(this).find('td');
            roleId = $tds.eq(0).text(),
                roleName = $tds.eq(1).text();

            defaultCheck = $tds.eq(2).text();
            console.log(defaultCheck);

            if (roleId == defaultRoleId) {
                selectedData.push(
                    {
                        RoleId: roleId,
                        IsDefault: 1
                    });
            }
            else {
                selectedData.push(
                    {
                        RoleId: roleId,
                        IsDefault: 0
                    });
            }
            console.log(selectedData);

            //alert('Row ' + (i + 1) + ':\nId: ' + roleId
            //    + '\nroleName: ' + roleName);

        });
        selectedData = JSON.stringify(selectedData);
        console.log(selectedData);
        $("#selectedItems").val(selectedData);
        console.log($("#selectedItems").val());
    }
        //console.log(tblData);
        //

        //    console.log(selectedData);
        //    var reqId = selectedData[1];
        //    console.log(reqId);
        //    $('#requestId').val(reqId);

        //table.find('tr').each(function (i) {
        //    var $tds = $(this).find('td'),
        //        productId = $tds.eq(0).text(),
        //        product = $tds.eq(1).text(),
        //        Quantity = $tds.eq(2).text();
        //    // do something with productId, product, Quantity
        //    alert('Row ' + (i + 1) + ':\nId: ' + productId
        //        + '\nProduct: ' + product
        //        + '\nQuantity: ' + Quantity);
        //});




</script>
@*<script>
        $("#jstree").jstree({
            "core": {
                "themes": {
                    "variant": "large"
                },
                "data": JSON.parse(Html.Raw(Json.Encode(Model.PermissionsList)))
            },
            "checkbox": {
                "keep_selected_style": false
            },
            "plugins": ["wholerow", "checkbox"],
        });

        function GetSelectedData() {
               var selectedData = [];
               var selectedIndexes;
               selectedIndexes = $("#jstree").jstree("get_selected", true);
               jQuery.each(selectedIndexes, function (index, value) {
                   selectedData.push(selectedIndexes[index]);
               });

               console.log("Hello");
               selectedData = JSON.stringify(selectedData);
                   console.log(selectedData);
                   $('#selectedItems').val(selectedData);
                   console.log(selectedData);

        };
    </script>*@
